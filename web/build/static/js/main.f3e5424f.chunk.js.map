{"version":3,"sources":["App.tsx","reportWebVitals.js","index.tsx"],"names":["App","useState","mediaURL","setMediaURL","mediaData","setMediaData","open","msg","mediaMsg","setMediaMsg","mediaLoading","setMediaLoading","className","placeholder","value","onChange","event","target","urlChange","onClick","test","indexOf","mediaURLClear","split","mediaURLNew","length","fetch","method","then","res","json","data","status","message","catch","GetImgs","map","media","index","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAmFeA,MA/Ef,WAAgB,IAAD,EACmBC,mBAAiB,IADpC,mBACNC,EADM,KACIC,EADJ,OAEqBF,mBAAc,IAFnC,mBAENG,EAFM,KAEKC,EAFL,OAGmBJ,mBAAc,CAAEK,MAAM,EAAOC,IAAK,KAHrD,mBAGNC,EAHM,KAGIC,EAHJ,OAI2BR,oBAAkB,GAJ7C,mBAINS,EAJM,KAIQC,EAJR,KA+Cb,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,gCACE,uBACEC,YAAY,WACZC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAhDF,SAACA,GACjBb,EAAYa,EAAMC,OAAOH,OA+CII,CAAUF,IAC/BJ,UAAU,cAEZ,wBACEA,UAAU,UACVO,QAAS,kBAjDH,WAMd,GALAV,EAAY,CAAEH,MAAM,EAAOC,IAAK,KAChCI,GAAgB,IAEI,kDAETS,KAAKlB,KAA8C,IAAjCA,EAASmB,QAAQ,WAG5C,OAFAV,GAAgB,GAChBF,EAAY,CAAEH,MAAM,EAAMC,IAAK,eACxB,EAGT,IAAIe,EAAqBpB,EAASqB,MAAM,KACpCC,EAAsBF,EAAcA,EAAcG,OAAS,GAG/DC,MAFqB,iBAAmBF,EAE1B,CACZG,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEW,IADMA,EAAKC,QAExBrB,GAAgB,GAChBF,EAAY,CAAEH,MAAM,EAAOC,IAAK,KAChCF,EAAa0B,EAAKA,QAElBpB,GAAgB,GAChBF,EAAY,CAAEH,MAAM,EAAMC,IAAKwB,EAAKE,cAGvCC,OACC,WACEvB,GAAgB,GAChBF,EAAY,CAAEH,MAAM,EAAMC,IAAK,oBAgBd4B,IAFjB,sBAQJ,qBAAKvB,UAAU,WAAf,SACGF,EAAe,qBAAKE,UAAU,oBAC7BJ,EAASF,KAAO,wBAAQM,UAAU,YAAlB,SAA+BJ,EAASD,MACtDH,EAAUgC,KAAI,SAACC,EAAYC,GACzB,OAAO,8BACL,qBAAKC,IAAKF,EAAOG,IAAI,GAAG5B,UAAU,oBADnB0B,YC7DhBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f3e5424f.chunk.js","sourcesContent":["import './App.css'\r\nimport { useState } from \"react\"\r\nimport \"mini.css\"\r\n\r\nfunction App() {\r\n  const [mediaURL, setMediaURL] = useState<string>(\"\")\r\n  const [mediaData, setMediaData] = useState<any>([])\r\n  const [mediaMsg, setMediaMsg] = useState<any>({ open: false, msg: \"\" })\r\n  const [mediaLoading, setMediaLoading] = useState<boolean>(false)\r\n\r\n  const urlChange = (event: any) => {\r\n    setMediaURL(event.target.value)\r\n  }\r\n\r\n  const GetImgs = () => {\r\n    setMediaMsg({ open: false, msg: \"\" })\r\n    setMediaLoading(true)\r\n\r\n    var regex: RegExp = /http(s)?:\\/\\/([\\w-]+.)+[\\w-]+(\\/[\\w- ./?%&=]*)?/\r\n\r\n    if (!regex.test(mediaURL) || mediaURL.indexOf(\"mdpr.jp\") === -1) {\r\n      setMediaLoading(false)\r\n      setMediaMsg({ open: true, msg: \"URL Error\" })\r\n      return false\r\n    }\r\n\r\n    let mediaURLClear: any = mediaURL.split(\" \")\r\n    let mediaURLNew: string = mediaURLClear[mediaURLClear.length - 1]\r\n    let apiurl: string = \"/api/mdpr?url=\" + mediaURLNew\r\n\r\n    fetch(apiurl, {\r\n      method: 'GET',\r\n    }).then(res => res.json())\r\n      .then(data => {\r\n        let status: number = data.status\r\n        if (status === 1) {\r\n          setMediaLoading(false)\r\n          setMediaMsg({ open: false, msg: \"\" })\r\n          setMediaData(data.data)\r\n        } else {\r\n          setMediaLoading(false)\r\n          setMediaMsg({ open: true, msg: data.message })\r\n        }\r\n      })\r\n      .catch(\r\n        () => {\r\n          setMediaLoading(false)\r\n          setMediaMsg({ open: true, msg: \"Server Error\" })\r\n        }\r\n      )\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <div>\r\n          <input\r\n            placeholder=\"mdpr url\"\r\n            value={mediaURL}\r\n            onChange={(event) => urlChange(event)}\r\n            className=\"App-input\"\r\n          />\r\n          <button\r\n            className=\"primary\"\r\n            onClick={() => GetImgs()}\r\n          >\r\n            GET\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"App-main\">\r\n        {mediaLoading ? <div className=\"spinner primary\"></div> :\r\n          mediaMsg.open ? <button className=\"secondary\">{mediaMsg.msg}</button > :\r\n            mediaData.map((media: any, index: number) => {\r\n              return <div key={index}>\r\n                <img src={media} alt=\"\" className='App-result-img' />\r\n              </div>\r\n            })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}